"""
Stella Agent - Sistema de Assistente Virtual com IA
Servidor principal FastAPI com arquitetura organizada
"""
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from loguru import logger
import os
from datetime import datetime

# Importa√ß√µes dos componentes da API
from stella.websocket.websocket_manager import WebSocketManager
from stella.api.routes import (
    create_auth_router,
    create_speech_router,
    create_face_router,
    create_session_router
)

# Configura√ß√£o da aplica√ß√£o FastAPI
app = FastAPI(
    title="Stella Agent API",
    description="Sistema de Assistente Virtual com IA, reconhecimento facial e comunica√ß√£o WebSocket",
    version="1.0.0",
    docs_url="/docs",
    redoc_url="/redoc"
)

# Configura√ß√£o CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # Em produ√ß√£o, especifique os dom√≠nios permitidos
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"]
)

# Inicializa√ß√£o do WebSocket Manager
websocket_manager = WebSocketManager()

# Inclus√£o das rotas organizadas
app.include_router(create_auth_router(websocket_manager))
app.include_router(create_speech_router(websocket_manager))
app.include_router(create_face_router(websocket_manager))
app.include_router(create_session_router(websocket_manager))

@app.get("/", tags=["Status"])
async def root():
    """
    Endpoint principal com informa√ß√µes do sistema
    
    Returns:
        Dict com status e informa√ß√µes da API
    """
    return {
        "service": "Stella Agent API",
        "status": "running",
        "version": "1.0.0",
        "description": "Sistema de Assistente Virtual com IA",
        "features": {
            "pusher_websocket": "Comunica√ß√£o em tempo real",
            "gemini_ai": "Processamento de linguagem natural",
            "face_recognition": "Reconhecimento facial",
            "session_management": "Gerenciamento de sess√µes com contexto"
        },
        "pusher_cluster": os.getenv('PUSHER_CLUSTER', 'us2'),
        "endpoints": {
            "docs": "/docs",
            "health": "/session/health",
            "auth": "/auth/pusher",
            "session_start": "/session/start",
            "session_end": "/session/end",
            "speech_process": "/speech/process",
            "face_recognize": "/face/recognize"
        },
        "timestamp": datetime.now().isoformat()
    }

if __name__ == "__main__":
    import uvicorn
    
    logger.info("üöÄ Iniciando Stella Agent...")
    logger.info("üìö Documenta√ß√£o da API: http://localhost:8000/docs")
    logger.info("üîç Redoc: http://localhost:8000/redoc")
    logger.info("üíª Endpoints principais:")
    logger.info("   POST /session/start - Iniciar nova sess√£o")
    logger.info("   POST /speech/process - Processar fala")
    logger.info("   POST /face/recognize - Reconhecimento facial")
    logger.info("   POST /auth/pusher - Autentica√ß√£o Pusher")
    logger.info("   GET /session/health - Status da API")
    logger.info("")
    logger.info("üîÑ Fluxo: HTTP POST ‚Üí IA/Processamento ‚Üí WebSocket Response")
    logger.info("üì° WebSocket: Pusher channels para comunica√ß√£o em tempo real")

    try:
        uvicorn.run(
            app, 
            host="0.0.0.0", 
            port=8000,
            log_level="info"
        )
    except KeyboardInterrupt:
        logger.info("üõë Servidor encerrado pelo usu√°rio")
    except Exception as e:
        logger.error(f"‚ùå Erro ao iniciar servidor: {e}")
    finally:
        logger.info("üëã Stella Agent finalizado")