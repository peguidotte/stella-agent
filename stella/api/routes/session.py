"""
Rotas de gerenciamento de sess√µes
"""
from fastapi import APIRouter, HTTPException
from loguru import logger
from stella.api.models.requests import SessionEndRequest
from stella.api.models.responses import StandardResponse, SessionStartResponse, HealthResponse
from stella.api.services.session import SessionService

def create_session_router(websocket_manager) -> APIRouter:
    """
    Cria router de sess√µes com depend√™ncia do WebSocketManager
    
    Args:
        websocket_manager: Inst√¢ncia do WebSocketManager
        
    Returns:
        APIRouter configurado para gerenciamento de sess√µes
    """
    router = APIRouter(prefix="/session", tags=["Gerenciamento de Sess√µes"])
    session_service = SessionService(websocket_manager)
    
    @router.post("/start", response_model=SessionStartResponse)
    async def start_session():
        """
        Inicia uma nova sess√£o de usu√°rio
        
        Returns:
            SessionStartResponse com dados da nova sess√£o
        """
        try:
            logger.info("üöÄ Solicita√ß√£o para iniciar nova sess√£o")
            
            result = session_service.start_new_session()
            
            if result.success:
                logger.success(f"‚úÖ Sess√£o criada: {result.data.get('session_id')}")
            else:
                logger.error(f"‚ùå Falha ao criar sess√£o: {result.message}")
            
            return result
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao iniciar sess√£o: {e}")
            raise HTTPException(
                status_code=500,
                detail=f"Erro interno ao iniciar sess√£o: {str(e)}"
            )
    
    @router.post("/end", response_model=StandardResponse)
    async def end_session(request: SessionEndRequest):
        """
        Finaliza uma sess√£o espec√≠fica
        
        Args:
            request: Dados da solicita√ß√£o (session_id)
            
        Returns:
            StandardResponse confirmando o encerramento
        """
        try:
            logger.info(f"üîö Solicita√ß√£o para encerrar sess√£o: {request.session_id}")
            
            # Valida se session_id n√£o est√° vazio
            if not request.session_id.strip():
                raise HTTPException(
                    status_code=400,
                    detail="ID da sess√£o n√£o pode estar vazio"
                )
            
            result = session_service.end_session(request.session_id)
            
            return result
            
        except HTTPException:
            raise  # Re-raise HTTP exceptions
        except Exception as e:
            logger.error(f"‚ùå Erro ao encerrar sess√£o: {e}")
            raise HTTPException(
                status_code=500,
                detail=f"Erro interno ao encerrar sess√£o: {str(e)}"
            )
    
    @router.get("/health", response_model=HealthResponse)
    async def health_check():
        """
        Endpoint de verifica√ß√£o de sa√∫de da API
        
        Returns:
            HealthResponse com status da API
        """
        try:
            # Faz limpeza de sess√µes expiradas como parte do health check
            cleaned_count = session_service.cleanup_expired_sessions()
            
            return HealthResponse(
                success=True,
                message="API funcionando normalmente",
                data={
                    "status": "healthy",
                    "expired_sessions_cleaned": cleaned_count,
                    "timestamp": session_service._get_current_timestamp()
                }
            )
            
        except Exception as e:
            logger.error(f"‚ùå Erro no health check: {e}")
            return HealthResponse(
                success=False,
                message="Problemas detectados na API",
                data={
                    "status": "unhealthy",
                    "error": str(e),
                    "timestamp": session_service._get_current_timestamp()
                }
            )
    
    return router
